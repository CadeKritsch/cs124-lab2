[{"/Users/htoomyat/Downloads/CS124/lab2-fork/cs124-lab2/src/index.jsx":"1","/Users/htoomyat/Downloads/CS124/lab2-fork/cs124-lab2/src/App.jsx":"2","/Users/htoomyat/Downloads/CS124/lab2-fork/cs124-lab2/src/firebase.jsx":"3","/Users/htoomyat/Downloads/CS124/lab2-fork/cs124-lab2/src/TodoList.jsx":"4","/Users/htoomyat/Downloads/CS124/lab2-fork/cs124-lab2/src/Menu.jsx":"5","/Users/htoomyat/Downloads/CS124/lab2-fork/cs124-lab2/src/TodoItem.jsx":"6"},{"size":146,"mtime":1645890162535,"results":"7","hashOfConfig":"8"},{"size":8785,"mtime":1651301085391,"results":"9","hashOfConfig":"8"},{"size":497,"mtime":1648132286404,"results":"10","hashOfConfig":"8"},{"size":2612,"mtime":1649729665964,"results":"11","hashOfConfig":"8"},{"size":1451,"mtime":1651300274911,"results":"12","hashOfConfig":"8"},{"size":1937,"mtime":1649727141676,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1x3x85h",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/htoomyat/Downloads/CS124/lab2-fork/cs124-lab2/src/index.jsx",[],[],"/Users/htoomyat/Downloads/CS124/lab2-fork/cs124-lab2/src/App.jsx",["34","35","36","37","38","39","40","41","42","43","44"],[],"import React, { useState } from \"react\";\nimport { generateUniqueID } from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\nimport { getAuth, signOut } from \"firebase/auth\";\nimport {\n  useAuthState,\n  useCreateUserWithEmailAndPassword,\n  useSignInWithEmailAndPassword,\n  useSignInWithGoogle,\n} from \"react-firebase-hooks/auth\";\nimport TodoList from \"./TodoList\";\nimport MenuPopupState from \"./Menu\";\nimport {\n  collection,\n  doc,\n  query,\n  getDocs,\n  where,\n  setDoc,\n  updateDoc,\n  deleteDoc,\n} from \"firebase/firestore\";\nimport Select from \"react-select\";\n\nimport { db } from \"./firebase.jsx\";\n\n// const INITIAL_DATA = [\n//   {\n//     itemName: \"default item\",\n//     isCompleted: false,\n//     id: generateUniqueID(),\n//   },\n//   {\n//     itemName: \"another item\",\n//     isCompleted: false,\n//     id: generateUniqueID(),\n//   },\n//   {\n//     itemName: \"and another item\",\n//     isCompleted: true,\n//     id: generateUniqueID(),\n//   },\n// ];\nconst listsRef = collection(db, \"/lists/\"); // path to the root directory in Firebase\n// const querySnapshot = getDocs(listsRef);\n// querySnapshot.forEach((doc) => {\n//   options.push(doc.data().listName);\n// });\n// const defaultListId = generateUniqueID();\nconst auth = getAuth();\n\nconst App = () => {\n  const [user, loading, error] = useAuthState(auth);\n  if (user == null) {\n    return <SignIn />;\n  }\n  return <SignedInApp user={user} />;\n};\n\nconst SignIn = () => {\n  return (\n    <>\n      <div className=\"app-container\">\n        <div className=\"sign-in-methods\">\n          <SignInWithGoogle />\n          <div>OR</div>\n          <SignInWithEmail />\n          <div>OR</div>\n          <SignUpWithEmail />\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst SignInWithGoogle = () => {\n  const [signInWithGoogle, user, loading, error] = useSignInWithGoogle(auth);\n\n  return (\n    <>\n      <button onClick={() => signInWithGoogle()}>Sign In With Google</button>\n    </>\n  );\n};\n\nconst SignInWithEmail = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [signInWithEmailAndPassword, user, loading, error] =\n    useSignInWithEmailAndPassword(auth);\n\n  return (\n    <>\n      <div className=\"email-signin\">\n        <input\n          type=\"text\"\n          name=\"Email\"\n          id=\"email\"\n          value={email}\n          placeholder={\"Email\"}\n          onChange={(e) => {\n            setEmail(e.target.value);\n          }}\n        />\n        <input\n          type=\"password\"\n          name=\"Password\"\n          id=\"email\"\n          value={password}\n          placeholder={\"Password\"}\n          onChange={(e) => {\n            setPassword(e.target.value);\n          }}\n        />\n        <button onClick={() => signInWithEmailAndPassword(email, password)}>\n          Sign In With Email\n        </button>\n      </div>\n    </>\n  );\n};\n\nconst SignUpWithEmail = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [createUserWithEmailAndPassword, user, loading, error] =\n    useCreateUserWithEmailAndPassword(auth);\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        name=\"Email\"\n        id=\"email\"\n        value={email}\n        placeholder={\"Email\"}\n        onChange={(e) => {\n          setEmail(e.target.value);\n        }}\n      />\n      <input\n        type=\"password\"\n        name=\"Password\"\n        id=\"password\"\n        value={password}\n        placeholder={\"Create a password\"}\n        onChange={(e) => {\n          setPassword(e.target.value);\n        }}\n      />\n      <button onClick={() => createUserWithEmailAndPassword(email, password)}>\n        Create Account\n      </button>\n    </>\n  );\n};\n\nconst SignedInApp = ({ user }) => {\n  //TODO\n  // console.log(user);\n  const [listId, setListId] = useState(\"defaultlist1234\");\n  const [listName, setListName] = useState(\"Default\");\n  const TODO_ITEMS_PATH = `/lists/${listId}/tasks`;\n  const todoItemsRef = collection(db, `/lists/${listId}/tasks`); // ref to tasks changes with listId and gets passed to child component TodoList\n  const [lists] = useCollectionData(listsRef);\n  // map lists to values and labels\n  // options is what appears in the dropdown menu\n  const options = lists\n    ? lists.map((l) => {\n        return { value: l.listId, label: l.listName };\n      })\n    : [];\n\n  const [isAddClicked, setIsAddClicked] = useState(false);\n  const [newItemNameInput, setNewItemNameInput] = useState(\"\");\n  const [isCompletedShown, setIsCompletedShown] = useState(true);\n  const [priorityInput, setPriorityInput] = useState(0);\n  const handleItemChange = (id, field, value) => {\n    const changedDocRef = doc(db, `${TODO_ITEMS_PATH}/${id}`);\n    updateDoc(changedDocRef, {\n      [field]: value,\n    });\n  };\n\n  const handleListNameChange = (id, newName) => {\n    const changedListRef = doc(db, `/lists/${id}`);\n    updateDoc(changedListRef, {\n      listName: newName,\n    });\n    setListName(newName);\n  };\n\n  const handleItemAdd = (name) => {\n    const id = generateUniqueID();\n    const newDocRef = doc(db, `${TODO_ITEMS_PATH}/${id}`);\n    setDoc(newDocRef, {\n      itemName: name,\n      isCompleted: false,\n      id,\n    });\n    setIsAddClicked(false);\n    setNewItemNameInput(\"\");\n  };\n\n  const handleToggleShowCompleted = () => {\n    setIsCompletedShown((prevState) => !prevState);\n  };\n\n  const handleDeleteCompleted = async () => {\n    // create a query with the required conditions\n    const completedItemsQuery = query(\n      collection(db, TODO_ITEMS_PATH),\n      where(\"isCompleted\", \"==\", true)\n    );\n\n    // get a snapshot of all matching docs\n    const querySnapshot = await getDocs(completedItemsQuery);\n\n    // perform delete on each one\n    querySnapshot.forEach((task) => {\n      const delDocRef = doc(db, `${TODO_ITEMS_PATH}/${task.id}`);\n      deleteDoc(delDocRef);\n    });\n  };\n\n  const handleDeleteList = async () => {\n    // Delete the entire subcollection of tasks\n    const querySnapshot = await getDocs(todoItemsRef);\n    querySnapshot.forEach((task) => {\n      const delDocRef = doc(db, `${TODO_ITEMS_PATH}/${task.id}`);\n      deleteDoc(delDocRef);\n    });\n\n    // Delete the list itself\n    const delListRef = doc(db, `/lists/${listId}`);\n    deleteDoc(delListRef);\n  };\n\n  const handleAddList = () => {\n    const newListId = generateUniqueID();\n    const newListRef = doc(db, `lists/${newListId}`);\n    setDoc(newListRef, {\n      listName: \"New List\",\n      listId: newListId,\n      ownerId: user.uid,\n    });\n  };\n\n  const handleSignOut = () => {\n    signOut(auth);\n  };\n\n  return (\n    <>\n      <div className=\"app-container\">\n        <p>\n          You are signed in as{\" \"}\n          <span className=\"user-display-name\">{user.displayName}</span>.\n        </p>\n        <Select\n          className=\"select-list-button\"\n          aria-label={\"List Selection\"}\n          defaultValue={listId}\n          onChange={(selectedList) => {\n            setListId(selectedList.value);\n            setListName(selectedList.label);\n          }}\n          options={options}\n        />\n\n        <TodoList\n          onItemChange={handleItemChange}\n          onItemAdd={handleItemAdd}\n          isCompletedShown={isCompletedShown}\n          listName={listName}\n          listId={listId}\n          onListNameChange={handleListNameChange}\n          todoItemsRef={todoItemsRef}\n        />\n\n        {isAddClicked ? (\n          <div className=\"add-item-input-form\">\n            <label htmlFor=\"new-item\">Task Name: </label>\n            <input\n              type=\"text\"\n              name=\"new-item\"\n              id=\"new-item\"\n              value={newItemNameInput}\n              onChange={(e) => setNewItemNameInput(e.target.value)}\n            />\n            <label htmlFor=\"priority\">Task Priority: (0-3)</label>\n            <input\n              type=\"number\"\n              min=\"0\"\n              max=\"3\"\n              name=\"priority\"\n              id=\"priority\"\n              value={priorityInput}\n              onChange={(e) => setPriorityInput(e.target.value)}\n            />\n            <button onClick={() => handleItemAdd(newItemNameInput)}>Add</button>\n          </div>\n        ) : (\n          <div\n            className=\"add-button\"\n            onKeyPress={() => setIsAddClicked(true)}\n            onClick={() => setIsAddClicked(true)}\n            tabindex=\"0\"\n          >\n            Add A Task\n          </div>\n        )}\n        <MenuPopupState\n          isCompletedShown={isCompletedShown}\n          onToggleShowCompleted={handleToggleShowCompleted}\n          onDeleteCompleted={handleDeleteCompleted}\n          onAddList={handleAddList}\n          onSignOut={handleSignOut}\n          onDeleteList={handleDeleteList}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","/Users/htoomyat/Downloads/CS124/lab2-fork/cs124-lab2/src/firebase.jsx",[],[],"/Users/htoomyat/Downloads/CS124/lab2-fork/cs124-lab2/src/TodoList.jsx",[],[],"/Users/htoomyat/Downloads/CS124/lab2-fork/cs124-lab2/src/Menu.jsx",[],[],["45","46"],"/Users/htoomyat/Downloads/CS124/lab2-fork/cs124-lab2/src/TodoItem.jsx",[],[],{"ruleId":"47","severity":1,"message":"48","line":53,"column":16,"nodeType":"49","messageId":"50","endLine":53,"endColumn":23},{"ruleId":"47","severity":1,"message":"51","line":53,"column":25,"nodeType":"49","messageId":"50","endLine":53,"endColumn":30},{"ruleId":"47","severity":1,"message":"52","line":77,"column":28,"nodeType":"49","messageId":"50","endLine":77,"endColumn":32},{"ruleId":"47","severity":1,"message":"48","line":77,"column":34,"nodeType":"49","messageId":"50","endLine":77,"endColumn":41},{"ruleId":"47","severity":1,"message":"51","line":77,"column":43,"nodeType":"49","messageId":"50","endLine":77,"endColumn":48},{"ruleId":"47","severity":1,"message":"52","line":89,"column":38,"nodeType":"49","messageId":"50","endLine":89,"endColumn":42},{"ruleId":"47","severity":1,"message":"48","line":89,"column":44,"nodeType":"49","messageId":"50","endLine":89,"endColumn":51},{"ruleId":"47","severity":1,"message":"51","line":89,"column":53,"nodeType":"49","messageId":"50","endLine":89,"endColumn":58},{"ruleId":"47","severity":1,"message":"52","line":126,"column":42,"nodeType":"49","messageId":"50","endLine":126,"endColumn":46},{"ruleId":"47","severity":1,"message":"48","line":126,"column":48,"nodeType":"49","messageId":"50","endLine":126,"endColumn":55},{"ruleId":"47","severity":1,"message":"51","line":126,"column":57,"nodeType":"49","messageId":"50","endLine":126,"endColumn":62},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","'user' is assigned a value but never used.","no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-global-assign","no-unsafe-negation"]